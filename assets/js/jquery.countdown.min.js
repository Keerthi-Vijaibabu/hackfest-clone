/*!
 * The Final Countdown for jQuery v2.2.0 (http://hilios.github.io/jQuery.countdown/)
 * Copyright (c) 2016 Edson Hilios
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
!function($) {
    "use strict";
    
    function toSeconds(input) {
        if (input instanceof Date) return input;
        if (String(input).match(dateRegex)) {
            if (String(input).match(/^[0-9]*$/)) input = Number(input);
            if (String(input).match(/\-/)) input = String(input).replace(/\-/g, "/");
            return new Date(input);
        }
        throw new Error("Couldn't cast `" + input + "` to a date object.");
    }

    function escapeRegExp(input) {
        return input.toString().replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }

    function formatOutput(input) {
        return function(output) {
            var matches = output.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
            if (matches) {
                for (var i = 0; i < matches.length; ++i) {
                    var match = matches[i].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/);
                    if (!match) continue;
                    var regex = new RegExp(escapeRegExp(match[0]));
                    var modifier = match[1] || "";
                    var padding = match[3] || "";
                    var replaceValue = null;
                    var key = match[2];
                    if (values.hasOwnProperty(key)) {
                        replaceValue = values[key];
                        replaceValue = Number(input[replaceValue]);
                    }
                    if (replaceValue !== null) {
                        if (modifier === "!") replaceValue = getModifiedValue(padding, replaceValue);
                        if (modifier === "" && replaceValue < 10) replaceValue = "0" + replaceValue.toString();
                        output = output.replace(regex, replaceValue.toString());
                    }
                }
            }
            output = output.replace(/%%/, "%");
            return output;
        };
    }

    function getModifiedValue(modifier, value) {
        var singular = "s";
        var plural = "";
        if (modifier) {
            var parts = modifier.replace(/(:|;|\s)/gi, "").split(/\,/);
            if (parts.length === 1) {
                singular = parts[0];
            } else {
                singular = parts[0];
                plural = parts[1];
            }
        }
        return Math.abs(value) > 1 ? plural : singular;
    }

    var dateRegex = [];
    dateRegex.push(/^[0-9]*$/.source);
    dateRegex.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source);
    dateRegex.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source);
    dateRegex = new RegExp(dateRegex.join("|"));

    var values = {
        Y: "years",
        m: "months",
        n: "daysToMonth",
        d: "daysToWeek",
        w: "weeks",
        W: "weeksToMonth",
        H: "hours",
        M: "minutes",
        S: "seconds",
        D: "totalDays",
        I: "totalHours",
        N: "totalMinutes",
        T: "totalSeconds"
    };

    var Countdown = function(el, finalDate, options) {
        this.el = el;
        this.$el = $(el);
        this.interval = null;
        this.offset = {};
        this.options = $.extend({}, defaults);
        this.instanceNumber = instances.length;
        instances.push(this);
        this.$el.data("countdown-instance", this.instanceNumber);
        if (options) {
            if (typeof options === "function") {
                this.$el.on("update.countdown", options);
                this.$el.on("stoped.countdown", options);
                this.$el.on("finish.countdown", options);
            } else {
                this.options = $.extend({}, defaults, options);
            }
        }
        this.setFinalDate(finalDate);
        if (this.options.defer === false) this.start();
    };

    Countdown.prototype = {
        start: function() {
            var _this = this;
            this.update();
            this.interval = setInterval(function() {
                _this.update.call(_this);
            }, this.options.precision);
        },
        stop: function() {
            clearInterval(this.interval);
            this.interval = null;
            this.dispatchEvent("stoped");
        },
        toggle: function() {
            if (this.interval) this.stop();
            else this.start();
        },
        pause: function() {
            this.stop();
        },
        resume: function() {
            this.start();
        },
        remove: function() {
            this.stop();
            instances[this.instanceNumber] = null;
            delete this.$el.data().countdownInstance;
        },
        setFinalDate: function(date) {
            this.finalDate = toSeconds(date);
        },
        update: function() {
            if (this.$el.closest("html").length === 0) {
                this.remove();
                return;
            }
            var currentDate = new Date();
            var secondsLeft = this.finalDate.getTime() - currentDate.getTime();
            secondsLeft = Math.ceil(secondsLeft / 1000);
            if (!this.options.elapse && secondsLeft < 0) secondsLeft = 0;
            this.totalSecsLeft = secondsLeft;
            this.elapsed = currentDate >= this.finalDate;
            this.offset = {
                seconds: this.totalSecsLeft % 60,
                minutes: Math.floor(this.totalSecsLeft / 60) % 60,
                hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,
                days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 % 30.4368),
                weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),
                weeksToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4,
                months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),
                years: Math.abs(this.finalDate.getFullYear() - currentDate.getFullYear()),
                totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),
                totalHours: Math.floor(this.totalSecsLeft / 60 / 60),
                totalMinutes: Math.floor(this.totalSecsLeft / 60),
                totalSeconds: this.totalSecsLeft
            };
            if (!this.options.elapse || this.totalSecsLeft !== 0) {
                this.dispatchEvent("update");
            } else {
                this.stop();
                this.dispatchEvent("finish");
            }
        },
        dispatchEvent: function(event) {
            var eventData = $.Event(event + ".countdown");
            eventData.finalDate = this.finalDate;
            eventData.elapsed = this.elapsed;
            eventData.offset = $.extend({}, this.offset);
            eventData.strftime = formatOutput(this.offset);
            this.$el.trigger(eventData);
        }
    };

    var defaults = {
        precision: 100,
        elapse: false,
        defer: false
    };

    var instances = [];

    $.extend(Countdown.prototype);

    $.fn.countdown = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        return this.each(function() {
            var instanceNumber = $(this).data("countdown-instance");
            if (typeof instanceNumber !== "undefined") {
                var instance = instances[instanceNumber];
                var arg = args[0];
                if (Countdown.prototype.hasOwnProperty(arg)) {
                    instance[arg].apply(instance, args.slice(1));
                } else if (!String(arg).match(/^[$A-Z_][0-9A-Z_$]*$/i)) {
                    instance.setFinalDate.call(instance, arg);
                    instance.start();
                } else {
                    $.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi, arg));
                }
            } else {
                new Countdown(this, args[0], args[1]);
            }
        });
    };

}(jQuery);
